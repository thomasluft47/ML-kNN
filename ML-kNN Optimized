// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo, thomasluft47, GPT-4

//@version=5
strategy("kNN ML Optimized Strategy", shorttitle="kNN ML Strat", overlay=true, pyramiding=0)

// Input parameters
k = input(5, "k-Nearest Neighbors")
d = input(100, "Lookback Window")
f = input(1, "Forecast Distance")
sl_pips = input.int(20, title="Stop Loss in Pips", minval=1)
tp_pips = input.int(20, title="Take Profit in Pips", minval=1)

use_rsi = input(true, "Use RSI")
use_roc = input(true, "Use ROC")
use_cci = input(true, "Use CCI")
use_mfi = input(true, "Use MFI")
use_volume = input(true, "Use Volume")

rsi_period = input.int(14, "RSI Period", minval=1)
roc_period = input.int(14, "ROC Period", minval=1)
cci_period = input.int(14, "CCI Period", minval=1)
mfi_period = input.int(14, "MFI Period", minval=1)

// Helper functions
euclidean_distance(p1, p2) =>
    _sum = 0.0
    for _n = 0 to array.size(p1) - 1
        _sum := _sum + pow(p1[_n] - p2[_n], 2)
    sqrt(_sum)

rank_elements(arr, idx) =>
    rank = 1
    for i = 0 to array.size(arr) - 1
        if arr[i] < arr[idx]
            rank := rank + 1
    rank

k_nearest_neighbors(k, distances) =>
    ranks = array.new_float(k, na)
    for i = 0 to k - 1
        min_idx = -1
        for j = 0 to array.size(distances) - 1
            if rank_elements(distances, j) == i + 1
                min_idx := j
                break
        array.set(ranks, i, float(min_idx))
    ranks

knn_regression(k, neighbors, targets) =>
    _sum = 0.0
    for _n = 0 to k - 1
        _sum := _sum + targets[int(neighbors[_n])]
    _sum / k

// Technical Analysis Indicators
rsi = ta.rsi(close, rsi_period)
roc = ta.roc(close, roc_period)
cci = ta.cci(close, cci_period)
mfi = ta.mfi(close, mfi_period)
vol = volume

// Main calculations
past_prices = array.new_float(d)
for i = 0 to d - 1
    array.set(past_prices, i, nz(close[i]))

current_prices = array.new_float(d - f)
for i = 0 to d - f - 1
    array.set(current_prices, i, nz(close[i + f]))

indicator_values = array.new_float(d - f)
for i = 0 to d - f - 1
    _value = use_rsi * rsi[i + f] + use_roc * roc[i + f] + use_cci * cci[i + f] + use_mfi * mfi[i + f] + use_volume * vol[i + f]
    array.set(indicator_values, i, _value)

distances = array.new_float(d)
for i = 0 to d - 1
    past_window = array.new_float(d - f)
    for j = 0 to d - f - 1
        array.set(past_window, j, past_prices[j + i] + indicator_values[j])
    array.set(distances, i, euclidean_distance(current_prices, past_window))

knn = knn_regression(k, k_nearest_neighbors(k, distances), past_prices)

// Entry and exit conditions
longCondition = crossover(close, knn)
if (longCondition)
    strategy.entry("Long", strategy.long)
shortCondition = crossunder(close, knn)
if (shortCondition)
    strategy.entry("Short", strategy.short)

// Stop Loss and Take Profit
sl = sl_pips * syminfo.mintick
tp = tp_pips * syminfo.mintick
strategy.exit("SL/TP", "Long", stop=entryprice-sl, limit=entryprice+tp)
strategy.exit("SL/TP", "Short", stop=entryprice+sl, limit=entryprice-tp)

// Plot
plot(knn, title="kNN Forecast", color=color.blue, linewidth=2)
